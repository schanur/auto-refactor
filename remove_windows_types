#!/usr/bin/ruby

require 'pp'

$int_type_conversion = [
  ['DWORD WINAPI',         'thread_sig_start_t'],
  ['DWORD exitCode',       ''],
  ['LONG',                 'int32_t'],
  ['FLOAT',                'float'],
  ['DOUBLE',               'double'],
  ['UINT',                 'unsigned int'],
  ['ULONGLONG',            'uint64_t'],
  ['INT',                  'int'],
  ['INT32',                'int32_t'],
  ['USHORT',               'uint16_t'],
  ['SHORT',                'int16_t'],
  ['BYTE',                 'uint8_t'],
  ['DWORD',                'uint32_t'],
  ['WORD',                 'uint16_t'],
  ['WCHAR',                'wchar_t'],
  ['UCHAR',                'uint8_t'],
  ['CHAR',                 'char'],
  # ['SIZE',                 'size_t']
  ['SYSTEMTIME',           'time_t']
]

$namespace_conversion = [
  ['wstring',              'std::wstring'],
  ['string',               'std::string'],
  ['vector',               'std::vector'],
  ['map',                  'std::map'],
  ['list',                 'std::list'],
  ['memcpy',               'std::memcpy'],
  ['strcpy',               'std::strcpy'],

#  ['EmptyGuid',            'Guid::EmptyGuid'],
]

$other_barrier_regex_conversion = [
  ['wchat_t',              'wchar_t'],
  ['BOOL',                 'bool'],
  ['TRUE',                 'true'],
  ['FALSE',                'false']
]

$allowed_parameter_symbol_character_list = ['.', '_', ' ', '*', '[', ']', '<', '>', '(', ')', ';', "\t"]
$parameter_field_regex = '(a-zA-Z0-9' + Regexp.quote($allowed_parameter_symbol_character_list.join("")) + ')'

$other_regex_conversion = [
  ['/*#define\ min\(a,b\)',      '//#define\ min\(a,b\)'],
  [/wsprintf\(([a-zA-Z0-9]*),/,  'swprintf(\1, sizeof(\1),'],

#                                                                                         src_str                                                        dest_buffer                     dest_buffer_size
  [/WideCharToMultiByte\(([#{$parameter_field_regex}]*),\ ([#{$parameter_field_regex}]*),\ ([#{$parameter_field_regex}]*),\ ([#{$parameter_field_regex}]*),\ ([#{$parameter_field_regex}]*),\ ([#{$parameter_field_regex}]*),\ ([#{$parameter_field_regex}]*),\ ([#{$parameter_field_regex}]*)/, 'wcstombs(\5, \3, \6);'],
  [/MultiByteToWideChar\(([#{$parameter_field_regex}]*),\ ([#{$parameter_field_regex}]*),\ ([#{$parameter_field_regex}]*),\ ([#{$parameter_field_regex}]*),\ ([#{$parameter_field_regex}]*),\ ([#{$parameter_field_regex}]*)/, 'mbstowcs(\5, \3, \6']
]
#   [/wsprintf/,  'a']
# ['wsprintf\(([a-zA-Z0-9]*),',  'swprintf\(\1, sizeof\(\1\),']

$other_string_conversion = [
  ['DWORD WINAPI',         'thread_sig_start_t'],
  ['_isnan',               'isnan'],
  ['#define min(a,b)',     '//#define min(a,b)'],
  ['//////',               '////']
]

$header_conversion = [
  ['#include "windows.h"',   '#include "windows_wrapper.h"'],
  ['#include "Windows.h"',   '#include "windows_wrapper.h"'],
  ['#include <windows.h>',   '#include "windows_wrapper.h"'],
  ['#include <Windows.h>',   '#include "windows_wrapper.h"'],

  ['stdafx.h',               'StdAfx.h'],

  ['tinyxml/tinyxml.h',      'tinyxml.h'],
  ['TinyXml/tinyxml.h',      'tinyxml.h'],
  ['TinyXml\tinyxml.h',      'tinyxml.h'],
  ['Tinyxml\tinyxml.h',      'tinyxml.h'],
  ['"tinyxml.h"',            '<tinyxml.h>'],

  ['Guid.h',                 'GUID.h'],

  ['pointf.h',               'PointF.h'],

  ['shared\\',                'shared/']

]

$type_barrier_character_list             = [' ', '*', '[', ']', '<', '>', '(', ')', ';', ',', "\t"]
# $type_barrier_character_list_regex_str   = [' ', '[', ']', '<', '>', '(', ')']
# $avoid_include                           = '(?!#include\ )'
$type_barrier_regex_start                = '((^|['  + Regexp.quote($type_barrier_character_list.join("")) + ']))'
$type_barrier_regex_end                  = '(['     + Regexp.quote($type_barrier_character_list.join("")) + '])'

def string_pair_to_type_regex(search_replace_pair)
  # raise "Bad parameter: search_replace_pair: " if
  # pp search_replace_pair
  # replace_regex = Regexp.new(Regexp.quote 'b')
  search_regex  = Regexp.new($type_barrier_regex_start + Regexp.quote(search_replace_pair[0]) + $type_barrier_regex_end)
  # search_regex  = Regexp.new(Regexp.quote "(#{$type_barrier_start_regex}#{search_replace_pair[0]}#{$type_barrier_end_regex})")
  # replace_regex = "\\1#{search_replace_pair[1]}\\2"
  replace_regex = '\1' + Regexp.quote(search_replace_pair[1]) + '\3'
  return [search_regex, replace_regex]
end

def replace_regex_list_in_array(data, regex_list)
  return data if regex_list.empty?
  regex = regex_list[0]
  new_data = data.map.with_index { |line, i|
    begin
      if line.include? '#include '
        # Do not replace in include files.
        line
      else
        line.gsub(regex[0], regex[1])
      end
    rescue
      puts "Failed to parse line " + i.to_s + ":" + line
      exit 1
    end
  }
  replace_regex_list_in_array(new_data, regex_list.drop(1))
end

def replace_string_list_in_array(data, string_replace_list)
  return data if string_replace_list.empty?
  string_replace = string_replace_list[0]
  new_data = data.map.with_index { |line, i|
    begin
      line.gsub(string_replace[0], string_replace[1])
    rescue
    puts "Failed to parse line " + i.to_s + ":" + line
      exit 1
    end
  }
  replace_string_list_in_array(new_data, string_replace_list.drop(1))

end

def find_header_inclusion_position(data)
  last_preprocessor_line = 0
  data.each.with_index { |line, i|
    if not (line.include? '#include ' or line.include? '#define' or  /^\ *$/ =~ line)
      last_preprocessor_line = i
    else
      break;
    end
  }
  last_preprocessor_line + 2
end

# Return the file lines with "inttypes_wrapper.h" include directive
# inserted at a valid position if it was not already present.
def ensure_platform_inttypes_header_present(data)
  return data if data.include?(/plaform\/all.h/)
  data.insert(find_header_inclusion_position(data), "#include \"platform/all.h\"\n")
  # return data if data.include?(/plaform\/inttypes_wrapper.h/)
  # data.insert(find_header_inclusion_position(data), "#include \"platform/inttypes_wrapper.h\"\n")
end


# Return array of lines of file.
def read_file_as_array(filename)
  File.open(filename, "rb:iso-8859-1").each.to_a
end



filename = ARGV[0]

file_data = read_file_as_array(filename)

regex_int_type                       = $int_type_conversion.map            { |type| string_pair_to_type_regex(type) }
regex_namespace                      = $namespace_conversion.map           { |type| string_pair_to_type_regex(type) }
barrier_regex_other                  = $other_barrier_regex_conversion.map { |type| string_pair_to_type_regex(type) }

post_int_type_conversion             = replace_regex_list_in_array(file_data, regex_int_type)
if not post_int_type_conversion.eql? file_data
  post_int_type_conversion           = ensure_platform_inttypes_header_present(post_int_type_conversion)
end
post_namespace_conversion            = replace_regex_list_in_array(post_int_type_conversion,                regex_namespace)
post_other_barrier_regex_conversion  = replace_regex_list_in_array(post_namespace_conversion,               barrier_regex_other)
post_other_regex_conversion          = replace_regex_list_in_array(post_other_barrier_regex_conversion,     $other_regex_conversion)
post_other_string_conversion         = replace_string_list_in_array(post_other_regex_conversion,            $other_string_conversion)
header_conversion                    = replace_string_list_in_array(post_other_string_conversion,           $header_conversion)

out_data                             = header_conversion

if file_data.eql? out_data
  puts "No changes: " + filename
else
  puts "Rewrite:    " + filename
end

  #File.rename(filename, filename + '.orig'
File.delete(filename)
File.open(filename, 'w') { |f| out_data.each { |line| f << line } }
# puts new_data
